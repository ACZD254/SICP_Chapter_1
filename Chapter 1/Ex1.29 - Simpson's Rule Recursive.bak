#lang sicp
#|Ex 1.29 - Simpson's Rule|#
#|Approximation = h/3(y0+4y1+2y2+4y3+2y4+...+2y(n-2)+4y(n-1)
and n is some even integer.
Additionally, yk is given by f(a+kh) and h = (b-a)/n|#

;Okay, so let's define what we can atm
;Summation Procedure
(define (sum term a b next)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) b next))))

;Find if term is even
(define (even? n)
  (= (remainder n 2) 0))

#|
;yk = f(a+kh)
(define (simpson_term a h n f)
  (f (+ a (* h n))))

;Piecewise Next function
(define (simpson_next a h n f simpson_term)
  (if (even? n)
      (* 2 (simpson_term a h n f))
      (* 4 (simpson_term a h n f))))
|#

;Maybe there is  simpler approach
(define (simpson_term f a n)
  (cond ((= n 0) (f a))
        ((even? n) (* 2 (f a)))
        (else (* 4 (f a )))))

; And the next term will be give by the simple
(define (simpson_next a n k)
  (+ a (* n k)))

;Wrapper
(define (simpsons_approximation a b f n)
  (define (h)
    (/ (- b a) n))
  (define (simpson_term a)
    (cond ((= n 0) (f a))
        ((even? n) (* 2 (f a)))
        (else (* 4 (f a )))))
  (define (simpson_next a)
    (+ a (* n h)))
  
  (sum (simposon_term a b simpson_next))

;Wow, lexical scoping suddenly becomes very important.
;Okay then, let us nest these.
  